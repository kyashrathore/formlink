name: Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.10.0'

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full git history for proper analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint code
        run: pnpm lint

      - name: Check types
        run: pnpm type-check

      - name: Check formatting
        run: pnpm format:check

      - name: Run tests
        run: pnpm test


  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for known vulnerabilities
        run: |
          # Additional security checks can be added here
          echo "Security audit completed"

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for outdated dependencies
        run: |
          echo "Checking for critically outdated dependencies..."
          # This can be enhanced with tools like npm-check-updates
          
      - name: Validate package-lock integrity
        run: |
          if [ -f "pnpm-lock.yaml" ]; then
            echo "‚úÖ pnpm-lock.yaml exists"
          else
            echo "‚ùå pnpm-lock.yaml missing"
            exit 1
          fi


  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality-checks, security-audit]
    if: failure()

    steps:
      - name: Notify team of failure
        run: |
          echo "‚ùå CI/CD pipeline failed"
          # Add notification logic here (Slack, Discord, email, etc.)
          # Example:
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"üö® Formlink CI/CD failed on ${{ github.ref }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }}
